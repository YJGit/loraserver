// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ns.proto

/*
Package ns is a generated protocol buffer package.

It is generated from these files:
	ns.proto

It has these top-level messages:
	CreateNodeSessionRequest
	CreateNodeSessionResponse
	GetNodeSessionRequest
	GetNodeSessionResponse
	UpdateNodeSessionRequest
	UpdateNodeSessionResponse
	DeleteNodeSessionRequest
	DeleteNodeSessionResponse
	GetRandomDevAddrRequest
	GetRandomDevAddrResponse
	EnqueueDataDownMACCommandRequest
	EnqueueDataDownMACCommandResponse
	PushDataDownRequest
	PushDataDownResponse
	CreateGatewayRequest
	CreateGatewayResponse
	GetGatewayRequest
	GetGatewayResponse
	UpdateGatewayRequest
	UpdateGatewayResponse
	ListGatewayRequest
	ListGatewayResponse
	DeleteGatewayRequest
	DeleteGatewayResponse
	GatewayStats
	GetGatewayStatsRequest
	GetGatewayStatsResponse
	GetFrameLogsForDevEUIRequest
	GetFrameLogsResponse
	FrameLog
	DataRate
	RXInfo
	TXInfo
	CreateChannelConfigurationRequest
	CreateChannelConfigurationResponse
	GetChannelConfigurationRequest
	GetChannelConfigurationResponse
	UpdateChannelConfigurationRequest
	UpdateChannelConfigurationResponse
	DeleteChannelConfigurationRequest
	DeleteChannelConfigurationResponse
	ListChannelConfigurationsRequest
	ListChannelConfigurationsResponse
*/
package ns

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RXWindow int32

const (
	// Receive window 1
	RXWindow_RX1 RXWindow = 0
	// Receive window 2
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AggregationInterval int32

const (
	AggregationInterval_SECOND  AggregationInterval = 0
	AggregationInterval_MINUTE  AggregationInterval = 1
	AggregationInterval_HOUR    AggregationInterval = 2
	AggregationInterval_DAY     AggregationInterval = 3
	AggregationInterval_WEEK    AggregationInterval = 4
	AggregationInterval_MONTH   AggregationInterval = 5
	AggregationInterval_QUARTER AggregationInterval = 6
	AggregationInterval_YEAR    AggregationInterval = 7
)

var AggregationInterval_name = map[int32]string{
	0: "SECOND",
	1: "MINUTE",
	2: "HOUR",
	3: "DAY",
	4: "WEEK",
	5: "MONTH",
	6: "QUARTER",
	7: "YEAR",
}
var AggregationInterval_value = map[string]int32{
	"SECOND":  0,
	"MINUTE":  1,
	"HOUR":    2,
	"DAY":     3,
	"WEEK":    4,
	"MONTH":   5,
	"QUARTER": 6,
	"YEAR":    7,
}

func (x AggregationInterval) String() string {
	return proto.EnumName(AggregationInterval_name, int32(x))
}
func (AggregationInterval) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateNodeSessionRequest struct {
	// The address of the device (4 bytes).
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	// The application EUI (8 bytes).
	AppEUI []byte `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	// The device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,3,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// The network-session key (16 bytes).
	NwkSKey []byte `protobuf:"bytes,4,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// The frame-counter used for the next downlink frame.
	FCntDown uint32 `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// the RX delay value (0 = 1 sec, 1 = 1 sec, 2 = 2 sec ...).
	RxDelay uint32 `protobuf:"varint,7,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// The data-rate offset used for RX1 (see LoRaWAN specs for valid values).
	Rx1DROffset uint32 `protobuf:"varint,8,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// The RX window to use for downlink transmissions.
	RxWindow RXWindow `protobuf:"varint,10,opt,name=rxWindow,enum=ns.RXWindow" json:"rxWindow,omitempty"`
	// The data-rate to use for RX2 transmissions.
	Rx2DR uint32 `protobuf:"varint,11,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Use relax frame-counter mode for ABP devices (this is insecure!).
	RelaxFCnt bool `protobuf:"varint,12,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// The interval (based on frame-counter) on which to calculate the ideal
	// data-rate and tx-power of the node and if needed, request an adaption.
	AdrInterval uint32 `protobuf:"varint,13,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// The installation margin to take into account when calculating the ideal
	// data-rate and tx-power. The default recommended value is 5dB.
	InstallationMargin float64 `protobuf:"fixed64,14,opt,name=installationMargin" json:"installationMargin,omitempty"`
}

func (m *CreateNodeSessionRequest) Reset()                    { *m = CreateNodeSessionRequest{} }
func (m *CreateNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeSessionRequest) ProtoMessage()               {}
func (*CreateNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateNodeSessionRequest) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *CreateNodeSessionRequest) GetAppEUI() []byte {
	if m != nil {
		return m.AppEUI
	}
	return nil
}

func (m *CreateNodeSessionRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *CreateNodeSessionRequest) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *CreateNodeSessionRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *CreateNodeSessionRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *CreateNodeSessionRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *CreateNodeSessionRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

type CreateNodeSessionResponse struct {
}

func (m *CreateNodeSessionResponse) Reset()                    { *m = CreateNodeSessionResponse{} }
func (m *CreateNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeSessionResponse) ProtoMessage()               {}
func (*CreateNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetNodeSessionRequest struct {
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *GetNodeSessionRequest) Reset()                    { *m = GetNodeSessionRequest{} }
func (m *GetNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNodeSessionRequest) ProtoMessage()               {}
func (*GetNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetNodeSessionRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type GetNodeSessionResponse struct {
	// The address of the device (4 bytes).
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	// The application EUI (8 bytes).
	AppEUI []byte `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	// The device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,3,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// The network-session key (16 bytes).
	NwkSKey []byte `protobuf:"bytes,4,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// The frame-counter used for the next downlink frame.
	FCntDown uint32 `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// the RX delay value (0 = 1 sec, 1 = 1 sec, 2 = 2 sec ...).
	RxDelay uint32 `protobuf:"varint,7,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// The data-rate offset used for RX1 (see LoRaWAN specs for valid values).
	Rx1DROffset uint32 `protobuf:"varint,8,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// The RX window to use for downlink transmissions.
	RxWindow RXWindow `protobuf:"varint,10,opt,name=rxWindow,enum=ns.RXWindow" json:"rxWindow,omitempty"`
	// The data-rate to use for RX2 transmissions.
	Rx2DR uint32 `protobuf:"varint,11,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Use relax frame-counter mode for ABP devices (this is insecure!).
	RelaxFCnt bool `protobuf:"varint,12,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// The interval (based on frame-counter) on which to calculate the ideal
	// data-rate and tx-power of the node and if needed, request an adaption.
	AdrInterval uint32 `protobuf:"varint,13,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// The installation margin to take into account when calculating the ideal
	// data-rate and tx-power. The default recommended value is 5dB.
	InstallationMargin float64 `protobuf:"fixed64,14,opt,name=installationMargin" json:"installationMargin,omitempty"`
	// The number of times the node should re-transmit an uplink frame.
	// This is controlled by the ADR engine.
	NbTrans uint32 `protobuf:"varint,15,opt,name=nbTrans" json:"nbTrans,omitempty"`
	// The TX power index of the node. This is controlled by the ADR engine.
	TxPowerIndex uint32 `protobuf:"varint,16,opt,name=txPowerIndex" json:"txPowerIndex,omitempty"`
}

func (m *GetNodeSessionResponse) Reset()                    { *m = GetNodeSessionResponse{} }
func (m *GetNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNodeSessionResponse) ProtoMessage()               {}
func (*GetNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetNodeSessionResponse) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *GetNodeSessionResponse) GetAppEUI() []byte {
	if m != nil {
		return m.AppEUI
	}
	return nil
}

func (m *GetNodeSessionResponse) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *GetNodeSessionResponse) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *GetNodeSessionResponse) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *GetNodeSessionResponse) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *GetNodeSessionResponse) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *GetNodeSessionResponse) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *GetNodeSessionResponse) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *GetNodeSessionResponse) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

func (m *GetNodeSessionResponse) GetNbTrans() uint32 {
	if m != nil {
		return m.NbTrans
	}
	return 0
}

func (m *GetNodeSessionResponse) GetTxPowerIndex() uint32 {
	if m != nil {
		return m.TxPowerIndex
	}
	return 0
}

type UpdateNodeSessionRequest struct {
	// The address of the device (4 bytes).
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
	// The application EUI (8 bytes).
	AppEUI []byte `protobuf:"bytes,2,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	// The device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,3,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// The network-session key (16 bytes).
	NwkSKey []byte `protobuf:"bytes,4,opt,name=nwkSKey,proto3" json:"nwkSKey,omitempty"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,5,opt,name=fCntUp" json:"fCntUp,omitempty"`
	// The frame-counter used for the next downlink frame.
	FCntDown uint32 `protobuf:"varint,6,opt,name=fCntDown" json:"fCntDown,omitempty"`
	// the RX delay value (0 = 1 sec, 1 = 1 sec, 2 = 2 sec ...).
	RxDelay uint32 `protobuf:"varint,7,opt,name=rxDelay" json:"rxDelay,omitempty"`
	// The data-rate offset used for RX1 (see LoRaWAN specs for valid values).
	Rx1DROffset uint32 `protobuf:"varint,8,opt,name=rx1DROffset" json:"rx1DROffset,omitempty"`
	// The RX window to use for downlink transmissions.
	RxWindow RXWindow `protobuf:"varint,10,opt,name=rxWindow,enum=ns.RXWindow" json:"rxWindow,omitempty"`
	// The data-rate to use for RX2 transmissions.
	Rx2DR uint32 `protobuf:"varint,11,opt,name=rx2DR" json:"rx2DR,omitempty"`
	// Use relax frame-counter mode for ABP devices (this is insecure!).
	RelaxFCnt bool `protobuf:"varint,12,opt,name=relaxFCnt" json:"relaxFCnt,omitempty"`
	// The interval (based on frame-counter) on which to calculate the ideal
	// data-rate and tx-power of the node and if needed, request an adaption.
	AdrInterval uint32 `protobuf:"varint,13,opt,name=adrInterval" json:"adrInterval,omitempty"`
	// The installation margin to take into account when calculating the ideal
	// data-rate and tx-power. The default recommended value is 5dB.
	InstallationMargin float64 `protobuf:"fixed64,14,opt,name=installationMargin" json:"installationMargin,omitempty"`
}

func (m *UpdateNodeSessionRequest) Reset()                    { *m = UpdateNodeSessionRequest{} }
func (m *UpdateNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeSessionRequest) ProtoMessage()               {}
func (*UpdateNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateNodeSessionRequest) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *UpdateNodeSessionRequest) GetAppEUI() []byte {
	if m != nil {
		return m.AppEUI
	}
	return nil
}

func (m *UpdateNodeSessionRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *UpdateNodeSessionRequest) GetNwkSKey() []byte {
	if m != nil {
		return m.NwkSKey
	}
	return nil
}

func (m *UpdateNodeSessionRequest) GetFCntUp() uint32 {
	if m != nil {
		return m.FCntUp
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetFCntDown() uint32 {
	if m != nil {
		return m.FCntDown
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRxDelay() uint32 {
	if m != nil {
		return m.RxDelay
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRx1DROffset() uint32 {
	if m != nil {
		return m.Rx1DROffset
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRxWindow() RXWindow {
	if m != nil {
		return m.RxWindow
	}
	return RXWindow_RX1
}

func (m *UpdateNodeSessionRequest) GetRx2DR() uint32 {
	if m != nil {
		return m.Rx2DR
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetRelaxFCnt() bool {
	if m != nil {
		return m.RelaxFCnt
	}
	return false
}

func (m *UpdateNodeSessionRequest) GetAdrInterval() uint32 {
	if m != nil {
		return m.AdrInterval
	}
	return 0
}

func (m *UpdateNodeSessionRequest) GetInstallationMargin() float64 {
	if m != nil {
		return m.InstallationMargin
	}
	return 0
}

type UpdateNodeSessionResponse struct {
}

func (m *UpdateNodeSessionResponse) Reset()                    { *m = UpdateNodeSessionResponse{} }
func (m *UpdateNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeSessionResponse) ProtoMessage()               {}
func (*UpdateNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteNodeSessionRequest struct {
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (m *DeleteNodeSessionRequest) Reset()                    { *m = DeleteNodeSessionRequest{} }
func (m *DeleteNodeSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeSessionRequest) ProtoMessage()               {}
func (*DeleteNodeSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteNodeSessionRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

type DeleteNodeSessionResponse struct {
}

func (m *DeleteNodeSessionResponse) Reset()                    { *m = DeleteNodeSessionResponse{} }
func (m *DeleteNodeSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeSessionResponse) ProtoMessage()               {}
func (*DeleteNodeSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetRandomDevAddrRequest struct {
}

func (m *GetRandomDevAddrRequest) Reset()                    { *m = GetRandomDevAddrRequest{} }
func (m *GetRandomDevAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrRequest) ProtoMessage()               {}
func (*GetRandomDevAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetRandomDevAddrResponse struct {
	DevAddr []byte `protobuf:"bytes,1,opt,name=devAddr,proto3" json:"devAddr,omitempty"`
}

func (m *GetRandomDevAddrResponse) Reset()                    { *m = GetRandomDevAddrResponse{} }
func (m *GetRandomDevAddrResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRandomDevAddrResponse) ProtoMessage()               {}
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetRandomDevAddrResponse) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

type EnqueueDataDownMACCommandRequest struct {
	// DevEUI of the node.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// Send the mac-command as FRMPayload (encrypted).
	FrmPayload bool `protobuf:"varint,2,opt,name=frmPayload" json:"frmPayload,omitempty"`
	// Command identifier (specified by the LoRaWAN specs).
	Cid uint32 `protobuf:"varint,4,opt,name=cid" json:"cid,omitempty"`
	// MAC-command(s). In case multiple payloads are defined, then they
	// are always sent within a single frame.
	Commands [][]byte `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (m *EnqueueDataDownMACCommandRequest) Reset()         { *m = EnqueueDataDownMACCommandRequest{} }
func (m *EnqueueDataDownMACCommandRequest) String() string { return proto.CompactTextString(m) }
func (*EnqueueDataDownMACCommandRequest) ProtoMessage()    {}
func (*EnqueueDataDownMACCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *EnqueueDataDownMACCommandRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *EnqueueDataDownMACCommandRequest) GetFrmPayload() bool {
	if m != nil {
		return m.FrmPayload
	}
	return false
}

func (m *EnqueueDataDownMACCommandRequest) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *EnqueueDataDownMACCommandRequest) GetCommands() [][]byte {
	if m != nil {
		return m.Commands
	}
	return nil
}

type EnqueueDataDownMACCommandResponse struct {
}

func (m *EnqueueDataDownMACCommandResponse) Reset()         { *m = EnqueueDataDownMACCommandResponse{} }
func (m *EnqueueDataDownMACCommandResponse) String() string { return proto.CompactTextString(m) }
func (*EnqueueDataDownMACCommandResponse) ProtoMessage()    {}
func (*EnqueueDataDownMACCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

type PushDataDownRequest struct {
	// DevEUI of the node to which to push the data.
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// Data (encrypted with the AppSKey) to push to the node.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Payload must be acknowledged by the node.
	Confirmed bool `protobuf:"varint,3,opt,name=confirmed" json:"confirmed,omitempty"`
	// FPort to use for transmitting the payload.
	FPort uint32 `protobuf:"varint,4,opt,name=fPort" json:"fPort,omitempty"`
	// FCnt used for encrypting the data. When this does not match the FCntDown
	// of the network-server, an error is returned.
	FCnt uint32 `protobuf:"varint,5,opt,name=fCnt" json:"fCnt,omitempty"`
}

func (m *PushDataDownRequest) Reset()                    { *m = PushDataDownRequest{} }
func (m *PushDataDownRequest) String() string            { return proto.CompactTextString(m) }
func (*PushDataDownRequest) ProtoMessage()               {}
func (*PushDataDownRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PushDataDownRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *PushDataDownRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushDataDownRequest) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *PushDataDownRequest) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *PushDataDownRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type PushDataDownResponse struct {
}

func (m *PushDataDownResponse) Reset()                    { *m = PushDataDownResponse{} }
func (m *PushDataDownResponse) String() string            { return proto.CompactTextString(m) }
func (*PushDataDownResponse) ProtoMessage()               {}
func (*PushDataDownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type CreateGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// ID of the channel-configuration (optional).
	ChannelConfigurationID int64 `protobuf:"varint,7,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
}

func (m *CreateGatewayRequest) Reset()                    { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()               {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *CreateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *CreateGatewayRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

type CreateGatewayResponse struct {
}

func (m *CreateGatewayResponse) Reset()                    { *m = CreateGatewayResponse{} }
func (m *CreateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayResponse) ProtoMessage()               {}
func (*CreateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type GetGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *GetGatewayRequest) Reset()                    { *m = GetGatewayRequest{} }
func (m *GetGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayRequest) ProtoMessage()               {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type GetGatewayResponse struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// The timestamp when the gateway was created.
	CreatedAt string `protobuf:"bytes,7,opt,name=createdAt" json:"createdAt,omitempty"`
	// The timestamp when the gateway was last updated.
	UpdatedAt string `protobuf:"bytes,8,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// The timestamp when the gateway was first seen.
	FirstSeenAt string `protobuf:"bytes,9,opt,name=firstSeenAt" json:"firstSeenAt,omitempty"`
	// The timestamp when the gateway was last seen.
	LastSeenAt string `protobuf:"bytes,10,opt,name=lastSeenAt" json:"lastSeenAt,omitempty"`
	// ID of the channel-configuration (optional).
	ChannelConfigurationID int64 `protobuf:"varint,11,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
}

func (m *GetGatewayResponse) Reset()                    { *m = GetGatewayResponse{} }
func (m *GetGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayResponse) ProtoMessage()               {}
func (*GetGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetGatewayResponse) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *GetGatewayResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetGatewayResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetGatewayResponse) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GetGatewayResponse) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GetGatewayResponse) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *GetGatewayResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *GetGatewayResponse) GetFirstSeenAt() string {
	if m != nil {
		return m.FirstSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetLastSeenAt() string {
	if m != nil {
		return m.LastSeenAt
	}
	return ""
}

func (m *GetGatewayResponse) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

type UpdateGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Name of the gateway.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description for the gateway.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Latitude of the gateway.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
	// ID of the channel-configuration (optional).
	ChannelConfigurationID int64 `protobuf:"varint,7,opt,name=channelConfigurationID" json:"channelConfigurationID,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()                    { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()               {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *UpdateGatewayRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateGatewayRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateGatewayRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *UpdateGatewayRequest) GetChannelConfigurationID() int64 {
	if m != nil {
		return m.ChannelConfigurationID
	}
	return 0
}

type UpdateGatewayResponse struct {
}

func (m *UpdateGatewayResponse) Reset()                    { *m = UpdateGatewayResponse{} }
func (m *UpdateGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayResponse) ProtoMessage()               {}
func (*UpdateGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ListGatewayRequest struct {
	// Max number of gateways to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *ListGatewayRequest) Reset()                    { *m = ListGatewayRequest{} }
func (m *ListGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayRequest) ProtoMessage()               {}
func (*ListGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ListGatewayRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListGatewayResponse struct {
	// Total number of gateways.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// Result-set.
	Result []*GetGatewayResponse `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayResponse) Reset()                    { *m = ListGatewayResponse{} }
func (m *ListGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayResponse) ProtoMessage()               {}
func (*ListGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListGatewayResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayResponse) GetResult() []*GetGatewayResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteGatewayRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *DeleteGatewayRequest) Reset()                    { *m = DeleteGatewayRequest{} }
func (m *DeleteGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayRequest) ProtoMessage()               {}
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteGatewayRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type DeleteGatewayResponse struct {
}

func (m *DeleteGatewayResponse) Reset()                    { *m = DeleteGatewayResponse{} }
func (m *DeleteGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayResponse) ProtoMessage()               {}
func (*DeleteGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type GatewayStats struct {
	// Timestamp of the (aggregated) measurement.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Packets received by the gateway.
	RxPacketsReceived int32 `protobuf:"varint,2,opt,name=rxPacketsReceived" json:"rxPacketsReceived,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RxPacketsReceivedOK int32 `protobuf:"varint,3,opt,name=rxPacketsReceivedOK" json:"rxPacketsReceivedOK,omitempty"`
	// Packets received by the gateway for transmission.
	TxPacketsReceived int32 `protobuf:"varint,4,opt,name=txPacketsReceived" json:"txPacketsReceived,omitempty"`
	// Packets transmitted by the gateway.
	TxPacketsEmitted int32 `protobuf:"varint,5,opt,name=txPacketsEmitted" json:"txPacketsEmitted,omitempty"`
}

func (m *GatewayStats) Reset()                    { *m = GatewayStats{} }
func (m *GatewayStats) String() string            { return proto.CompactTextString(m) }
func (*GatewayStats) ProtoMessage()               {}
func (*GatewayStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GatewayStats) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *GatewayStats) GetRxPacketsReceived() int32 {
	if m != nil {
		return m.RxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetRxPacketsReceivedOK() int32 {
	if m != nil {
		return m.RxPacketsReceivedOK
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsReceived() int32 {
	if m != nil {
		return m.TxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsEmitted() int32 {
	if m != nil {
		return m.TxPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Aggregation interval.
	Interval AggregationInterval `protobuf:"varint,2,opt,name=interval,enum=ns.AggregationInterval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestamp string `protobuf:"bytes,3,opt,name=startTimestamp" json:"startTimestamp,omitempty"`
	// Timestamp until to get from.
	EndTimestamp string `protobuf:"bytes,4,opt,name=endTimestamp" json:"endTimestamp,omitempty"`
}

func (m *GetGatewayStatsRequest) Reset()                    { *m = GetGatewayStatsRequest{} }
func (m *GetGatewayStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsRequest) ProtoMessage()               {}
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetGatewayStatsRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *GetGatewayStatsRequest) GetInterval() AggregationInterval {
	if m != nil {
		return m.Interval
	}
	return AggregationInterval_SECOND
}

func (m *GetGatewayStatsRequest) GetStartTimestamp() string {
	if m != nil {
		return m.StartTimestamp
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetEndTimestamp() string {
	if m != nil {
		return m.EndTimestamp
	}
	return ""
}

type GetGatewayStatsResponse struct {
	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetGatewayStatsResponse) Reset()                    { *m = GetGatewayStatsResponse{} }
func (m *GetGatewayStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsResponse) ProtoMessage()               {}
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetFrameLogsForDevEUIRequest struct {
	// The device EUI (8 bytes).
	DevEUI []byte `protobuf:"bytes,1,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// Max number of logs to return in the result-set.
	Limit int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int32 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *GetFrameLogsForDevEUIRequest) Reset()                    { *m = GetFrameLogsForDevEUIRequest{} }
func (m *GetFrameLogsForDevEUIRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFrameLogsForDevEUIRequest) ProtoMessage()               {}
func (*GetFrameLogsForDevEUIRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetFrameLogsForDevEUIRequest) GetDevEUI() []byte {
	if m != nil {
		return m.DevEUI
	}
	return nil
}

func (m *GetFrameLogsForDevEUIRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetFrameLogsForDevEUIRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetFrameLogsResponse struct {
	// Total number of logs.
	TotalCount int32 `protobuf:"varint,1,opt,name=totalCount" json:"totalCount,omitempty"`
	// The result-set.
	Result []*FrameLog `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *GetFrameLogsResponse) Reset()                    { *m = GetFrameLogsResponse{} }
func (m *GetFrameLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetFrameLogsResponse) ProtoMessage()               {}
func (*GetFrameLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetFrameLogsResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetFrameLogsResponse) GetResult() []*FrameLog {
	if m != nil {
		return m.Result
	}
	return nil
}

type FrameLog struct {
	// Timestamp of when the frame was logged.
	CreatedAt string `protobuf:"bytes,1,opt,name=createdAt" json:"createdAt,omitempty"`
	// RX-info set (in case of an uplink).
	RxInfoSet []*RXInfo `protobuf:"bytes,2,rep,name=rxInfoSet" json:"rxInfoSet,omitempty"`
	// TX-info (in case of a downlink).
	TxInfo *TXInfo `protobuf:"bytes,3,opt,name=txInfo" json:"txInfo,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayload []byte `protobuf:"bytes,4,opt,name=phyPayload,proto3" json:"phyPayload,omitempty"`
}

func (m *FrameLog) Reset()                    { *m = FrameLog{} }
func (m *FrameLog) String() string            { return proto.CompactTextString(m) }
func (*FrameLog) ProtoMessage()               {}
func (*FrameLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *FrameLog) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *FrameLog) GetRxInfoSet() []*RXInfo {
	if m != nil {
		return m.RxInfoSet
	}
	return nil
}

func (m *FrameLog) GetTxInfo() *TXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *FrameLog) GetPhyPayload() []byte {
	if m != nil {
		return m.PhyPayload
	}
	return nil
}

type DataRate struct {
	Modulation   string `protobuf:"bytes,1,opt,name=modulation" json:"modulation,omitempty"`
	BandWidth    uint32 `protobuf:"varint,2,opt,name=bandWidth" json:"bandWidth,omitempty"`
	SpreadFactor uint32 `protobuf:"varint,3,opt,name=spreadFactor" json:"spreadFactor,omitempty"`
	Bitrate      uint32 `protobuf:"varint,4,opt,name=bitrate" json:"bitrate,omitempty"`
}

func (m *DataRate) Reset()                    { *m = DataRate{} }
func (m *DataRate) String() string            { return proto.CompactTextString(m) }
func (*DataRate) ProtoMessage()               {}
func (*DataRate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DataRate) GetModulation() string {
	if m != nil {
		return m.Modulation
	}
	return ""
}

func (m *DataRate) GetBandWidth() uint32 {
	if m != nil {
		return m.BandWidth
	}
	return 0
}

func (m *DataRate) GetSpreadFactor() uint32 {
	if m != nil {
		return m.SpreadFactor
	}
	return 0
}

func (m *DataRate) GetBitrate() uint32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

type RXInfo struct {
	// Channel number on which the frame was received.
	Channel int32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	// Code-rate.
	CodeRate string `protobuf:"bytes,2,opt,name=codeRate" json:"codeRate,omitempty"`
	// frequency.
	Frequency int64 `protobuf:"varint,3,opt,name=frequency" json:"frequency,omitempty"`
	// LoRa SNR.
	LoRaSNR float64 `protobuf:"fixed64,4,opt,name=loRaSNR" json:"loRaSNR,omitempty"`
	// RSSI / signal strength.
	Rssi int32 `protobuf:"varint,5,opt,name=rssi" json:"rssi,omitempty"`
	// Time (when the gateway has a GPS).
	Time string `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,8,opt,name=dataRate" json:"dataRate,omitempty"`
	// Gateway MAC.
	Mac []byte `protobuf:"bytes,9,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *RXInfo) Reset()                    { *m = RXInfo{} }
func (m *RXInfo) String() string            { return proto.CompactTextString(m) }
func (*RXInfo) ProtoMessage()               {}
func (*RXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *RXInfo) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *RXInfo) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *RXInfo) GetLoRaSNR() float64 {
	if m != nil {
		return m.LoRaSNR
	}
	return 0
}

func (m *RXInfo) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *RXInfo) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *RXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

func (m *RXInfo) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type TXInfo struct {
	// Code-rate.
	CodeRate string `protobuf:"bytes,1,opt,name=codeRate" json:"codeRate,omitempty"`
	// Frequency.
	Frequency int64 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// Immediately.
	Immediately bool `protobuf:"varint,3,opt,name=immediately" json:"immediately,omitempty"`
	// Gateway MAC.
	Mac []byte `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	// TX power.
	Power int32 `protobuf:"varint,5,opt,name=power" json:"power,omitempty"`
	// Gateway internal timestamp.
	Timestamp uint32 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// Data-rate.
	DataRate *DataRate `protobuf:"bytes,7,opt,name=dataRate" json:"dataRate,omitempty"`
}

func (m *TXInfo) Reset()                    { *m = TXInfo{} }
func (m *TXInfo) String() string            { return proto.CompactTextString(m) }
func (*TXInfo) ProtoMessage()               {}
func (*TXInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *TXInfo) GetCodeRate() string {
	if m != nil {
		return m.CodeRate
	}
	return ""
}

func (m *TXInfo) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TXInfo) GetImmediately() bool {
	if m != nil {
		return m.Immediately
	}
	return false
}

func (m *TXInfo) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

func (m *TXInfo) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *TXInfo) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TXInfo) GetDataRate() *DataRate {
	if m != nil {
		return m.DataRate
	}
	return nil
}

type CreateChannelConfigurationRequest struct {
	// Name of the channel-configuration.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Channels active in this configuration. These channel indices must map
	// to the channel numbers as specified in the LoRaWAN Regional Parameters.
	Channels []int32 `protobuf:"varint,2,rep,packed,name=channels" json:"channels,omitempty"`
}

func (m *CreateChannelConfigurationRequest) Reset()         { *m = CreateChannelConfigurationRequest{} }
func (m *CreateChannelConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChannelConfigurationRequest) ProtoMessage()    {}
func (*CreateChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33}
}

func (m *CreateChannelConfigurationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateChannelConfigurationRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

type CreateChannelConfigurationResponse struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateChannelConfigurationResponse) Reset()         { *m = CreateChannelConfigurationResponse{} }
func (m *CreateChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*CreateChannelConfigurationResponse) ProtoMessage()    {}
func (*CreateChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *CreateChannelConfigurationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetChannelConfigurationRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetChannelConfigurationRequest) Reset()                    { *m = GetChannelConfigurationRequest{} }
func (m *GetChannelConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChannelConfigurationRequest) ProtoMessage()               {}
func (*GetChannelConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetChannelConfigurationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetChannelConfigurationResponse struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the channel-configuration.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Channels active in this configuration. These channel indices must map
	// to the channel numbers as specified in the LoRaWAN Regional Parameters.
	Channels []int32 `protobuf:"varint,3,rep,packed,name=channels" json:"channels,omitempty"`
	// The timestamp when the channel-configuration was created.
	CreatedAt string `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	// The timestamp when the channel-configuration was last updated.
	UpdatedAt string `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *GetChannelConfigurationResponse) Reset()         { *m = GetChannelConfigurationResponse{} }
func (m *GetChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelConfigurationResponse) ProtoMessage()    {}
func (*GetChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *GetChannelConfigurationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetChannelConfigurationResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetChannelConfigurationResponse) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *GetChannelConfigurationResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *GetChannelConfigurationResponse) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type UpdateChannelConfigurationRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Name of the channel-configuration.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Channels active in this configuration. These channel indices must map
	// to the channel numbers as specified in the LoRaWAN Regional Parameters.
	Channels []int32 `protobuf:"varint,3,rep,packed,name=channels" json:"channels,omitempty"`
}

func (m *UpdateChannelConfigurationRequest) Reset()         { *m = UpdateChannelConfigurationRequest{} }
func (m *UpdateChannelConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelConfigurationRequest) ProtoMessage()    {}
func (*UpdateChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

func (m *UpdateChannelConfigurationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateChannelConfigurationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateChannelConfigurationRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

type UpdateChannelConfigurationResponse struct {
}

func (m *UpdateChannelConfigurationResponse) Reset()         { *m = UpdateChannelConfigurationResponse{} }
func (m *UpdateChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateChannelConfigurationResponse) ProtoMessage()    {}
func (*UpdateChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38}
}

type DeleteChannelConfigurationRequest struct {
	// ID of the channel-configuration.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteChannelConfigurationRequest) Reset()         { *m = DeleteChannelConfigurationRequest{} }
func (m *DeleteChannelConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteChannelConfigurationRequest) ProtoMessage()    {}
func (*DeleteChannelConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39}
}

func (m *DeleteChannelConfigurationRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteChannelConfigurationResponse struct {
}

func (m *DeleteChannelConfigurationResponse) Reset()         { *m = DeleteChannelConfigurationResponse{} }
func (m *DeleteChannelConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteChannelConfigurationResponse) ProtoMessage()    {}
func (*DeleteChannelConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40}
}

type ListChannelConfigurationsRequest struct {
}

func (m *ListChannelConfigurationsRequest) Reset()         { *m = ListChannelConfigurationsRequest{} }
func (m *ListChannelConfigurationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListChannelConfigurationsRequest) ProtoMessage()    {}
func (*ListChannelConfigurationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

type ListChannelConfigurationsResponse struct {
	// Result-set.
	Result []*GetChannelConfigurationResponse `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ListChannelConfigurationsResponse) Reset()         { *m = ListChannelConfigurationsResponse{} }
func (m *ListChannelConfigurationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListChannelConfigurationsResponse) ProtoMessage()    {}
func (*ListChannelConfigurationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42}
}

func (m *ListChannelConfigurationsResponse) GetResult() []*GetChannelConfigurationResponse {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateNodeSessionRequest)(nil), "ns.CreateNodeSessionRequest")
	proto.RegisterType((*CreateNodeSessionResponse)(nil), "ns.CreateNodeSessionResponse")
	proto.RegisterType((*GetNodeSessionRequest)(nil), "ns.GetNodeSessionRequest")
	proto.RegisterType((*GetNodeSessionResponse)(nil), "ns.GetNodeSessionResponse")
	proto.RegisterType((*UpdateNodeSessionRequest)(nil), "ns.UpdateNodeSessionRequest")
	proto.RegisterType((*UpdateNodeSessionResponse)(nil), "ns.UpdateNodeSessionResponse")
	proto.RegisterType((*DeleteNodeSessionRequest)(nil), "ns.DeleteNodeSessionRequest")
	proto.RegisterType((*DeleteNodeSessionResponse)(nil), "ns.DeleteNodeSessionResponse")
	proto.RegisterType((*GetRandomDevAddrRequest)(nil), "ns.GetRandomDevAddrRequest")
	proto.RegisterType((*GetRandomDevAddrResponse)(nil), "ns.GetRandomDevAddrResponse")
	proto.RegisterType((*EnqueueDataDownMACCommandRequest)(nil), "ns.EnqueueDataDownMACCommandRequest")
	proto.RegisterType((*EnqueueDataDownMACCommandResponse)(nil), "ns.EnqueueDataDownMACCommandResponse")
	proto.RegisterType((*PushDataDownRequest)(nil), "ns.PushDataDownRequest")
	proto.RegisterType((*PushDataDownResponse)(nil), "ns.PushDataDownResponse")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ns.CreateGatewayRequest")
	proto.RegisterType((*CreateGatewayResponse)(nil), "ns.CreateGatewayResponse")
	proto.RegisterType((*GetGatewayRequest)(nil), "ns.GetGatewayRequest")
	proto.RegisterType((*GetGatewayResponse)(nil), "ns.GetGatewayResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ns.UpdateGatewayRequest")
	proto.RegisterType((*UpdateGatewayResponse)(nil), "ns.UpdateGatewayResponse")
	proto.RegisterType((*ListGatewayRequest)(nil), "ns.ListGatewayRequest")
	proto.RegisterType((*ListGatewayResponse)(nil), "ns.ListGatewayResponse")
	proto.RegisterType((*DeleteGatewayRequest)(nil), "ns.DeleteGatewayRequest")
	proto.RegisterType((*DeleteGatewayResponse)(nil), "ns.DeleteGatewayResponse")
	proto.RegisterType((*GatewayStats)(nil), "ns.GatewayStats")
	proto.RegisterType((*GetGatewayStatsRequest)(nil), "ns.GetGatewayStatsRequest")
	proto.RegisterType((*GetGatewayStatsResponse)(nil), "ns.GetGatewayStatsResponse")
	proto.RegisterType((*GetFrameLogsForDevEUIRequest)(nil), "ns.GetFrameLogsForDevEUIRequest")
	proto.RegisterType((*GetFrameLogsResponse)(nil), "ns.GetFrameLogsResponse")
	proto.RegisterType((*FrameLog)(nil), "ns.FrameLog")
	proto.RegisterType((*DataRate)(nil), "ns.DataRate")
	proto.RegisterType((*RXInfo)(nil), "ns.RXInfo")
	proto.RegisterType((*TXInfo)(nil), "ns.TXInfo")
	proto.RegisterType((*CreateChannelConfigurationRequest)(nil), "ns.CreateChannelConfigurationRequest")
	proto.RegisterType((*CreateChannelConfigurationResponse)(nil), "ns.CreateChannelConfigurationResponse")
	proto.RegisterType((*GetChannelConfigurationRequest)(nil), "ns.GetChannelConfigurationRequest")
	proto.RegisterType((*GetChannelConfigurationResponse)(nil), "ns.GetChannelConfigurationResponse")
	proto.RegisterType((*UpdateChannelConfigurationRequest)(nil), "ns.UpdateChannelConfigurationRequest")
	proto.RegisterType((*UpdateChannelConfigurationResponse)(nil), "ns.UpdateChannelConfigurationResponse")
	proto.RegisterType((*DeleteChannelConfigurationRequest)(nil), "ns.DeleteChannelConfigurationRequest")
	proto.RegisterType((*DeleteChannelConfigurationResponse)(nil), "ns.DeleteChannelConfigurationResponse")
	proto.RegisterType((*ListChannelConfigurationsRequest)(nil), "ns.ListChannelConfigurationsRequest")
	proto.RegisterType((*ListChannelConfigurationsResponse)(nil), "ns.ListChannelConfigurationsResponse")
	proto.RegisterEnum("ns.RXWindow", RXWindow_name, RXWindow_value)
	proto.RegisterEnum("ns.AggregationInterval", AggregationInterval_name, AggregationInterval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServer service

type NetworkServerClient interface {
	// CreateNodeSession creates the given node-session.
	// The DevAddr must contain the same NwkID as the configured NetID.
	// Node-sessions will expire automatically after the configured TTL.
	CreateNodeSession(ctx context.Context, in *CreateNodeSessionRequest, opts ...grpc.CallOption) (*CreateNodeSessionResponse, error)
	// GetNodeSession returns the node-session matching the given DevEUI.
	GetNodeSession(ctx context.Context, in *GetNodeSessionRequest, opts ...grpc.CallOption) (*GetNodeSessionResponse, error)
	// UpdateNodeSession updates the given node-session.
	UpdateNodeSession(ctx context.Context, in *UpdateNodeSessionRequest, opts ...grpc.CallOption) (*UpdateNodeSessionResponse, error)
	// DeleteNodeSession deletes the node-session matching the given DevAddr.
	DeleteNodeSession(ctx context.Context, in *DeleteNodeSessionRequest, opts ...grpc.CallOption) (*DeleteNodeSessionResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// EnqueueDataDownMACCommand adds the downlink mac-command to the queue.
	EnqueueDataDownMACCommand(ctx context.Context, in *EnqueueDataDownMACCommandRequest, opts ...grpc.CallOption) (*EnqueueDataDownMACCommandResponse, error)
	// PushDataDown pushes the given downlink payload to the node (only works for Class-C nodes).
	PushDataDown(ctx context.Context, in *PushDataDownRequest, opts ...grpc.CallOption) (*PushDataDownResponse, error)
	// CreateGateway creates the given gateway.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error)
	// ListGateways returns the existing gateways.
	ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error)
	// GetGatewayStats returns stats of an existing gateway.
	GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
	// GetFrameLogsForDevEUI returns the uplink / downlink frame logs for the given DevEUI.
	GetFrameLogsForDevEUI(ctx context.Context, in *GetFrameLogsForDevEUIRequest, opts ...grpc.CallOption) (*GetFrameLogsResponse, error)
	// CreateChannelConfiguration creates the given channel-configuration.
	CreateChannelConfiguration(ctx context.Context, in *CreateChannelConfigurationRequest, opts ...grpc.CallOption) (*CreateChannelConfigurationResponse, error)
	// GetChannelConfiguration returns the channel-configuration for the given ID.
	GetChannelConfiguration(ctx context.Context, in *GetChannelConfigurationRequest, opts ...grpc.CallOption) (*GetChannelConfigurationResponse, error)
	// UpdateChannelConfiguration updates the given channel-configuration.
	UpdateChannelConfiguration(ctx context.Context, in *UpdateChannelConfigurationRequest, opts ...grpc.CallOption) (*UpdateChannelConfigurationResponse, error)
	// DeleteChannelConfiguration deletes the channel-configuration matching the
	// given ID.
	DeleteChannelConfiguration(ctx context.Context, in *DeleteChannelConfigurationRequest, opts ...grpc.CallOption) (*DeleteChannelConfigurationResponse, error)
	// ListChannelConfigurations returns all channel-configurations.
	ListChannelConfigurations(ctx context.Context, in *ListChannelConfigurationsRequest, opts ...grpc.CallOption) (*ListChannelConfigurationsResponse, error)
}

type networkServerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerClient(cc *grpc.ClientConn) NetworkServerClient {
	return &networkServerClient{cc}
}

func (c *networkServerClient) CreateNodeSession(ctx context.Context, in *CreateNodeSessionRequest, opts ...grpc.CallOption) (*CreateNodeSessionResponse, error) {
	out := new(CreateNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetNodeSession(ctx context.Context, in *GetNodeSessionRequest, opts ...grpc.CallOption) (*GetNodeSessionResponse, error) {
	out := new(GetNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateNodeSession(ctx context.Context, in *UpdateNodeSessionRequest, opts ...grpc.CallOption) (*UpdateNodeSessionResponse, error) {
	out := new(UpdateNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteNodeSession(ctx context.Context, in *DeleteNodeSessionRequest, opts ...grpc.CallOption) (*DeleteNodeSessionResponse, error) {
	out := new(DeleteNodeSessionResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteNodeSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetRandomDevAddr(ctx context.Context, in *GetRandomDevAddrRequest, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetRandomDevAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) EnqueueDataDownMACCommand(ctx context.Context, in *EnqueueDataDownMACCommandRequest, opts ...grpc.CallOption) (*EnqueueDataDownMACCommandResponse, error) {
	out := new(EnqueueDataDownMACCommandResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/EnqueueDataDownMACCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) PushDataDown(ctx context.Context, in *PushDataDownRequest, opts ...grpc.CallOption) (*PushDataDownResponse, error) {
	out := new(PushDataDownResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/PushDataDown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*CreateGatewayResponse, error) {
	out := new(CreateGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*UpdateGatewayResponse, error) {
	out := new(UpdateGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) ListGateways(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/ListGateways", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*DeleteGatewayResponse, error) {
	out := new(DeleteGatewayResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteGateway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetGatewayStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetFrameLogsForDevEUI(ctx context.Context, in *GetFrameLogsForDevEUIRequest, opts ...grpc.CallOption) (*GetFrameLogsResponse, error) {
	out := new(GetFrameLogsResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetFrameLogsForDevEUI", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) CreateChannelConfiguration(ctx context.Context, in *CreateChannelConfigurationRequest, opts ...grpc.CallOption) (*CreateChannelConfigurationResponse, error) {
	out := new(CreateChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/CreateChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) GetChannelConfiguration(ctx context.Context, in *GetChannelConfigurationRequest, opts ...grpc.CallOption) (*GetChannelConfigurationResponse, error) {
	out := new(GetChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/GetChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) UpdateChannelConfiguration(ctx context.Context, in *UpdateChannelConfigurationRequest, opts ...grpc.CallOption) (*UpdateChannelConfigurationResponse, error) {
	out := new(UpdateChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/UpdateChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) DeleteChannelConfiguration(ctx context.Context, in *DeleteChannelConfigurationRequest, opts ...grpc.CallOption) (*DeleteChannelConfigurationResponse, error) {
	out := new(DeleteChannelConfigurationResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/DeleteChannelConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) ListChannelConfigurations(ctx context.Context, in *ListChannelConfigurationsRequest, opts ...grpc.CallOption) (*ListChannelConfigurationsResponse, error) {
	out := new(ListChannelConfigurationsResponse)
	err := grpc.Invoke(ctx, "/ns.NetworkServer/ListChannelConfigurations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServer service

type NetworkServerServer interface {
	// CreateNodeSession creates the given node-session.
	// The DevAddr must contain the same NwkID as the configured NetID.
	// Node-sessions will expire automatically after the configured TTL.
	CreateNodeSession(context.Context, *CreateNodeSessionRequest) (*CreateNodeSessionResponse, error)
	// GetNodeSession returns the node-session matching the given DevEUI.
	GetNodeSession(context.Context, *GetNodeSessionRequest) (*GetNodeSessionResponse, error)
	// UpdateNodeSession updates the given node-session.
	UpdateNodeSession(context.Context, *UpdateNodeSessionRequest) (*UpdateNodeSessionResponse, error)
	// DeleteNodeSession deletes the node-session matching the given DevAddr.
	DeleteNodeSession(context.Context, *DeleteNodeSessionRequest) (*DeleteNodeSessionResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *GetRandomDevAddrRequest) (*GetRandomDevAddrResponse, error)
	// EnqueueDataDownMACCommand adds the downlink mac-command to the queue.
	EnqueueDataDownMACCommand(context.Context, *EnqueueDataDownMACCommandRequest) (*EnqueueDataDownMACCommandResponse, error)
	// PushDataDown pushes the given downlink payload to the node (only works for Class-C nodes).
	PushDataDown(context.Context, *PushDataDownRequest) (*PushDataDownResponse, error)
	// CreateGateway creates the given gateway.
	CreateGateway(context.Context, *CreateGatewayRequest) (*CreateGatewayResponse, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*UpdateGatewayResponse, error)
	// ListGateways returns the existing gateways.
	ListGateways(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(context.Context, *DeleteGatewayRequest) (*DeleteGatewayResponse, error)
	// GetGatewayStats returns stats of an existing gateway.
	GetGatewayStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
	// GetFrameLogsForDevEUI returns the uplink / downlink frame logs for the given DevEUI.
	GetFrameLogsForDevEUI(context.Context, *GetFrameLogsForDevEUIRequest) (*GetFrameLogsResponse, error)
	// CreateChannelConfiguration creates the given channel-configuration.
	CreateChannelConfiguration(context.Context, *CreateChannelConfigurationRequest) (*CreateChannelConfigurationResponse, error)
	// GetChannelConfiguration returns the channel-configuration for the given ID.
	GetChannelConfiguration(context.Context, *GetChannelConfigurationRequest) (*GetChannelConfigurationResponse, error)
	// UpdateChannelConfiguration updates the given channel-configuration.
	UpdateChannelConfiguration(context.Context, *UpdateChannelConfigurationRequest) (*UpdateChannelConfigurationResponse, error)
	// DeleteChannelConfiguration deletes the channel-configuration matching the
	// given ID.
	DeleteChannelConfiguration(context.Context, *DeleteChannelConfigurationRequest) (*DeleteChannelConfigurationResponse, error)
	// ListChannelConfigurations returns all channel-configurations.
	ListChannelConfigurations(context.Context, *ListChannelConfigurationsRequest) (*ListChannelConfigurationsResponse, error)
}

func RegisterNetworkServerServer(s *grpc.Server, srv NetworkServerServer) {
	s.RegisterService(&_NetworkServer_serviceDesc, srv)
}

func _NetworkServer_CreateNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateNodeSession(ctx, req.(*CreateNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetNodeSession(ctx, req.(*GetNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateNodeSession(ctx, req.(*UpdateNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteNodeSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteNodeSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteNodeSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteNodeSession(ctx, req.(*DeleteNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDevAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetRandomDevAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetRandomDevAddr(ctx, req.(*GetRandomDevAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_EnqueueDataDownMACCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueDataDownMACCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).EnqueueDataDownMACCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/EnqueueDataDownMACCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).EnqueueDataDownMACCommand(ctx, req.(*EnqueueDataDownMACCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_PushDataDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDataDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).PushDataDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/PushDataDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).PushDataDown(ctx, req.(*PushDataDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).ListGateways(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteGateway(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetGatewayStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetGatewayStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetFrameLogsForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrameLogsForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetFrameLogsForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetFrameLogsForDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetFrameLogsForDevEUI(ctx, req.(*GetFrameLogsForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_CreateChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).CreateChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/CreateChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).CreateChannelConfiguration(ctx, req.(*CreateChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_GetChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/GetChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetChannelConfiguration(ctx, req.(*GetChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_UpdateChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).UpdateChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/UpdateChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).UpdateChannelConfiguration(ctx, req.(*UpdateChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_DeleteChannelConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).DeleteChannelConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/DeleteChannelConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).DeleteChannelConfiguration(ctx, req.(*DeleteChannelConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_ListChannelConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).ListChannelConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ns.NetworkServer/ListChannelConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).ListChannelConfigurations(ctx, req.(*ListChannelConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ns.NetworkServer",
	HandlerType: (*NetworkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNodeSession",
			Handler:    _NetworkServer_CreateNodeSession_Handler,
		},
		{
			MethodName: "GetNodeSession",
			Handler:    _NetworkServer_GetNodeSession_Handler,
		},
		{
			MethodName: "UpdateNodeSession",
			Handler:    _NetworkServer_UpdateNodeSession_Handler,
		},
		{
			MethodName: "DeleteNodeSession",
			Handler:    _NetworkServer_DeleteNodeSession_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _NetworkServer_GetRandomDevAddr_Handler,
		},
		{
			MethodName: "EnqueueDataDownMACCommand",
			Handler:    _NetworkServer_EnqueueDataDownMACCommand_Handler,
		},
		{
			MethodName: "PushDataDown",
			Handler:    _NetworkServer_PushDataDown_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _NetworkServer_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _NetworkServer_GetGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _NetworkServer_UpdateGateway_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _NetworkServer_ListGateways_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _NetworkServer_DeleteGateway_Handler,
		},
		{
			MethodName: "GetGatewayStats",
			Handler:    _NetworkServer_GetGatewayStats_Handler,
		},
		{
			MethodName: "GetFrameLogsForDevEUI",
			Handler:    _NetworkServer_GetFrameLogsForDevEUI_Handler,
		},
		{
			MethodName: "CreateChannelConfiguration",
			Handler:    _NetworkServer_CreateChannelConfiguration_Handler,
		},
		{
			MethodName: "GetChannelConfiguration",
			Handler:    _NetworkServer_GetChannelConfiguration_Handler,
		},
		{
			MethodName: "UpdateChannelConfiguration",
			Handler:    _NetworkServer_UpdateChannelConfiguration_Handler,
		},
		{
			MethodName: "DeleteChannelConfiguration",
			Handler:    _NetworkServer_DeleteChannelConfiguration_Handler,
		},
		{
			MethodName: "ListChannelConfigurations",
			Handler:    _NetworkServer_ListChannelConfigurations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ns.proto",
}

func init() { proto.RegisterFile("ns.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x72, 0xdb, 0xc8,
	0x11, 0x16, 0x48, 0x91, 0x22, 0x5b, 0x94, 0x96, 0x1e, 0xcb, 0x12, 0x44, 0x2b, 0x0e, 0x85, 0xb5,
	0xb7, 0x58, 0xae, 0x94, 0xb2, 0x2b, 0x6f, 0xe5, 0x92, 0xca, 0x81, 0x21, 0x29, 0xad, 0xca, 0xb6,
	0xa4, 0x0c, 0xa5, 0xf2, 0x6e, 0x55, 0x0e, 0x19, 0x73, 0x86, 0x32, 0x62, 0x10, 0xe0, 0x0e, 0x86,
	0x12, 0xf5, 0x02, 0xa9, 0xe4, 0x05, 0x72, 0x4b, 0x5e, 0x20, 0xaf, 0x93, 0x53, 0x1e, 0x20, 0x95,
	0x43, 0xce, 0xa9, 0x1c, 0x53, 0xf3, 0x03, 0x10, 0x20, 0x01, 0xd2, 0x3e, 0x65, 0xab, 0xd6, 0x37,
	0x74, 0xf7, 0x4c, 0x4f, 0xf7, 0xf4, 0x37, 0xdd, 0x3d, 0x03, 0xa8, 0xf8, 0xe1, 0xd1, 0x98, 0x07,
	0x22, 0x40, 0x05, 0x3f, 0x74, 0xfe, 0x5a, 0x04, 0xbb, 0xc3, 0x19, 0x11, 0xec, 0x3c, 0xa0, 0xac,
	0xcf, 0xc2, 0xd0, 0x0d, 0x7c, 0xcc, 0xbe, 0x9f, 0xb0, 0x50, 0x20, 0x1b, 0x36, 0x28, 0xbb, 0x6d,
	0x53, 0xca, 0x6d, 0xab, 0x69, 0xb5, 0x6a, 0x38, 0x22, 0xd1, 0x2e, 0x94, 0xc9, 0x78, 0xdc, 0xbb,
	0x3e, 0xb3, 0x0b, 0x4a, 0x60, 0x28, 0xc9, 0xa7, 0xec, 0x56, 0xf2, 0x8b, 0x9a, 0xaf, 0x29, 0xa9,
	0xc9, 0xbf, 0x7b, 0xdf, 0x7f, 0xc9, 0xee, 0xed, 0x75, 0xad, 0xc9, 0x90, 0x72, 0xc6, 0xb0, 0xe3,
	0x8b, 0xeb, 0xb1, 0x5d, 0x6a, 0x5a, 0xad, 0x2d, 0x6c, 0x28, 0xd4, 0x80, 0x8a, 0xfc, 0xea, 0x06,
	0x77, 0xbe, 0x5d, 0x56, 0x92, 0x98, 0x96, 0xda, 0xf8, 0xb4, 0xcb, 0x3c, 0x72, 0x6f, 0x6f, 0x28,
	0x51, 0x44, 0xa2, 0x26, 0x6c, 0xf2, 0xe9, 0x57, 0x5d, 0x7c, 0x31, 0x1c, 0x86, 0x4c, 0xd8, 0x15,
	0x25, 0x4d, 0xb2, 0x50, 0x0b, 0x2a, 0x7c, 0xfa, 0xc6, 0xf5, 0x69, 0x70, 0x67, 0x43, 0xd3, 0x6a,
	0x6d, 0x1f, 0xd7, 0x8e, 0xfc, 0xf0, 0x08, 0x7f, 0xab, 0x79, 0x38, 0x96, 0xa2, 0x1d, 0x28, 0xf1,
	0xe9, 0x71, 0x17, 0xdb, 0x9b, 0x4a, 0x8b, 0x26, 0xd0, 0x01, 0x54, 0x39, 0xf3, 0xc8, 0xf4, 0xa4,
	0xe3, 0x0b, 0xbb, 0xd6, 0xb4, 0x5a, 0x15, 0x3c, 0x63, 0xc8, 0xf5, 0x09, 0xe5, 0x67, 0xbe, 0x60,
	0xfc, 0x96, 0x78, 0xf6, 0x96, 0x5e, 0x3f, 0xc1, 0x42, 0x47, 0x80, 0x5c, 0x3f, 0x14, 0xc4, 0xf3,
	0x88, 0x70, 0x03, 0xff, 0x35, 0xe1, 0x37, 0xae, 0x6f, 0x6f, 0x37, 0xad, 0x96, 0x85, 0x33, 0x24,
	0xce, 0x63, 0xd8, 0xcf, 0x88, 0x4f, 0x38, 0x0e, 0xfc, 0x90, 0x39, 0x3f, 0x87, 0x47, 0xa7, 0x4c,
	0x64, 0x44, 0x6e, 0x16, 0x07, 0x2b, 0x19, 0x07, 0xe7, 0x1f, 0x45, 0xd8, 0x9d, 0x9f, 0xa1, 0x75,
	0x7d, 0x0a, 0xf6, 0xff, 0x3f, 0xd8, 0x6a, 0xe7, 0xde, 0x5e, 0x71, 0xe2, 0x87, 0xf6, 0x67, 0xda,
	0x57, 0x43, 0x22, 0x07, 0x6a, 0x62, 0x7a, 0x19, 0xdc, 0x31, 0x7e, 0xe6, 0x53, 0x36, 0xb5, 0xeb,
	0x4a, 0x9c, 0xe2, 0xa9, 0xb3, 0x7c, 0x3d, 0xa6, 0x9f, 0xce, 0xf2, 0x0f, 0xf8, 0x2c, 0x67, 0xc4,
	0xc7, 0x9c, 0xe5, 0x63, 0xb0, 0xbb, 0xcc, 0x63, 0x99, 0xc1, 0xcb, 0x3b, 0xce, 0x8f, 0x61, 0x3f,
	0x63, 0x8e, 0x51, 0xb8, 0x0f, 0x7b, 0xa7, 0x4c, 0x60, 0xe2, 0xd3, 0x60, 0xd4, 0xd5, 0xb1, 0x36,
	0xfa, 0x9c, 0xaf, 0xc1, 0x5e, 0x14, 0xad, 0xca, 0x03, 0xce, 0x1f, 0x2d, 0x68, 0xf6, 0xfc, 0xef,
	0x27, 0x6c, 0xc2, 0xba, 0x44, 0x10, 0x19, 0xbe, 0xd7, 0xed, 0x4e, 0x27, 0x18, 0x8d, 0x88, 0x4f,
	0x57, 0x98, 0x8a, 0x9e, 0x00, 0x0c, 0xf9, 0xe8, 0x92, 0xdc, 0x7b, 0x01, 0xa1, 0x0a, 0x69, 0x15,
	0x9c, 0xe0, 0xa0, 0x3a, 0x14, 0x07, 0x2e, 0x55, 0x88, 0xda, 0xc2, 0xf2, 0x53, 0xa2, 0x66, 0xa0,
	0x75, 0x87, 0x76, 0xa9, 0x59, 0x6c, 0xd5, 0x70, 0x4c, 0x3b, 0x9f, 0xc3, 0xe1, 0x12, 0x4b, 0xcc,
	0x06, 0xfc, 0xc9, 0x82, 0x87, 0x97, 0x93, 0xf0, 0x5d, 0x34, 0x64, 0x95, 0x89, 0x08, 0xd6, 0x29,
	0x11, 0xc4, 0x1c, 0x03, 0xf5, 0x2d, 0x21, 0x32, 0x08, 0xfc, 0xa1, 0xcb, 0x47, 0x8c, 0xaa, 0x73,
	0x50, 0xc1, 0x33, 0x86, 0x84, 0xd5, 0xf0, 0x32, 0xe0, 0xc2, 0x98, 0xad, 0x09, 0xa9, 0x47, 0xc2,
	0xdb, 0x1c, 0x02, 0xf5, 0xed, 0xec, 0xc2, 0x4e, 0xda, 0x14, 0x63, 0xe3, 0xbf, 0x2d, 0xd8, 0xd1,
	0xf9, 0xfd, 0x94, 0x08, 0x76, 0x47, 0xee, 0x23, 0x23, 0xeb, 0x50, 0x1c, 0x91, 0x81, 0xb1, 0x50,
	0x7e, 0x4a, 0xb5, 0x3e, 0x19, 0x31, 0x65, 0x5e, 0x15, 0xab, 0x6f, 0x89, 0x51, 0xca, 0xc2, 0x01,
	0x77, 0xc7, 0x12, 0x66, 0xca, 0xc0, 0x2a, 0x4e, 0xb2, 0xe4, 0x2e, 0x4a, 0x0c, 0x8a, 0x09, 0x65,
	0xca, 0x4a, 0x0b, 0xc7, 0xb4, 0x74, 0xce, 0x0b, 0xfc, 0x1b, 0x2d, 0x2c, 0x29, 0xe1, 0x8c, 0x21,
	0x67, 0x12, 0xcf, 0xcc, 0x2c, 0xeb, 0x99, 0x11, 0x8d, 0x7e, 0x01, 0xbb, 0x83, 0x77, 0xc4, 0xf7,
	0x99, 0xd7, 0x91, 0x9b, 0x71, 0x33, 0xe1, 0x0a, 0xe7, 0x67, 0x5d, 0x75, 0x88, 0x8b, 0x38, 0x47,
	0xea, 0xec, 0xc1, 0xa3, 0x39, 0x6f, 0xcd, 0x3e, 0x3c, 0x83, 0x07, 0xa7, 0x4c, 0xac, 0xda, 0x03,
	0xe7, 0x5f, 0x05, 0x40, 0xc9, 0x71, 0x06, 0xb3, 0x3f, 0xec, 0xcd, 0x92, 0x18, 0x52, 0x4e, 0xd3,
	0xb6, 0x50, 0xfb, 0x53, 0xc5, 0x33, 0x86, 0x94, 0x4e, 0x54, 0x52, 0x90, 0xd2, 0x8a, 0x96, 0xc6,
	0x0c, 0x69, 0xf3, 0xd0, 0xe5, 0xa1, 0xe8, 0x33, 0xe6, 0xb7, 0x85, 0x5d, 0xd5, 0x36, 0x27, 0x58,
	0xf2, 0x60, 0x79, 0x24, 0x1e, 0x00, 0x6a, 0x40, 0x82, 0xb3, 0x24, 0x54, 0x9b, 0x4b, 0x43, 0x25,
	0x91, 0xa9, 0xb3, 0xd5, 0x8f, 0x05, 0x99, 0x73, 0xde, 0x1a, 0x64, 0xfe, 0x1a, 0xd0, 0x2b, 0x37,
	0x9c, 0x87, 0xe6, 0x0e, 0x94, 0x3c, 0x77, 0xe4, 0x0a, 0xb5, 0x0d, 0x25, 0xac, 0x09, 0x99, 0x59,
	0x02, 0x5d, 0xad, 0x0a, 0x8a, 0x6d, 0x28, 0x87, 0xc1, 0xc3, 0x94, 0x0e, 0x03, 0xdb, 0x27, 0x00,
	0x22, 0x10, 0xc4, 0xeb, 0x04, 0x13, 0x3f, 0xd2, 0x94, 0xe0, 0xa0, 0x23, 0x28, 0x73, 0x16, 0x4e,
	0x3c, 0xa9, 0xae, 0xd8, 0xda, 0x3c, 0xde, 0x95, 0xd5, 0x6d, 0x11, 0xfe, 0xd8, 0x8c, 0x72, 0x5a,
	0xb0, 0xa3, 0xcb, 0xc1, 0xca, 0x73, 0xb4, 0x07, 0x8f, 0xe6, 0x46, 0x1a, 0x6f, 0xff, 0x69, 0x41,
	0xcd, 0xf0, 0xfa, 0x82, 0x88, 0x50, 0x46, 0x42, 0xb8, 0x23, 0x16, 0x0a, 0x32, 0x1a, 0x2b, 0x0d,
	0x55, 0x3c, 0x63, 0xa0, 0x9f, 0xc1, 0x03, 0x3e, 0xbd, 0x24, 0x83, 0xf7, 0x4c, 0x84, 0x98, 0x0d,
	0x98, 0x7b, 0xcb, 0xa8, 0xf1, 0x7d, 0x51, 0x80, 0xbe, 0x84, 0x87, 0x0b, 0xcc, 0x8b, 0x97, 0x0a,
	0x1b, 0x25, 0x9c, 0x25, 0x92, 0xfa, 0xc5, 0x82, 0xfe, 0x75, 0xad, 0x7f, 0x41, 0x80, 0x9e, 0x43,
	0x3d, 0x66, 0xf6, 0x46, 0xae, 0x10, 0x8c, 0x2a, 0xf0, 0x94, 0xf0, 0x02, 0xdf, 0xf9, 0x9b, 0xa5,
	0x3a, 0xe1, 0xa4, 0xaf, 0xf9, 0x00, 0x7f, 0x01, 0x15, 0x37, 0xea, 0x03, 0x0a, 0xaa, 0xd1, 0xd8,
	0x93, 0xa1, 0x68, 0xdf, 0xdc, 0x70, 0x76, 0xa3, 0x11, 0x64, 0xc4, 0x38, 0x1e, 0x88, 0xbe, 0x80,
	0xed, 0x50, 0x10, 0x2e, 0xae, 0xe2, 0xed, 0xd3, 0x87, 0x60, 0x8e, 0x2b, 0x5b, 0x3b, 0xe6, 0xd3,
	0xd9, 0xa8, 0x75, 0x35, 0x2a, 0xc5, 0x73, 0x3a, 0xaa, 0x96, 0xa7, 0x8d, 0x35, 0x20, 0x6a, 0xc5,
	0x20, 0xb1, 0x14, 0x48, 0xea, 0x0a, 0x24, 0xc9, 0x91, 0x11, 0x3c, 0x28, 0x1c, 0x9c, 0x32, 0x71,
	0xc2, 0xc9, 0x88, 0xbd, 0x0a, 0x6e, 0xc2, 0x93, 0x80, 0x77, 0x55, 0xe1, 0x5b, 0x55, 0x17, 0x63,
	0xac, 0x17, 0xb2, 0xb1, 0x5e, 0x4c, 0x61, 0xfd, 0xb7, 0xb0, 0x93, 0x5c, 0xe5, 0x83, 0xc1, 0xfe,
	0x74, 0x0e, 0xec, 0xaa, 0x95, 0x8b, 0xd4, 0xc4, 0x3e, 0xfc, 0xd9, 0x82, 0x4a, 0xc4, 0x4c, 0x27,
	0x56, 0x6b, 0x3e, 0xb1, 0xb6, 0xa0, 0xca, 0xa7, 0x67, 0xfe, 0x30, 0xe8, 0xb3, 0x48, 0x27, 0xe8,
	0xf6, 0x50, 0x32, 0xf1, 0x4c, 0x88, 0x1c, 0x28, 0x0b, 0x45, 0x28, 0x57, 0xcc, 0xb0, 0x2b, 0x3d,
	0xcc, 0x48, 0xa4, 0xf9, 0xe3, 0x77, 0xf7, 0x51, 0xff, 0xa2, 0x1b, 0xdf, 0x04, 0xc7, 0xf9, 0x83,
	0x05, 0x15, 0x59, 0xdd, 0x31, 0x11, 0xca, 0xd7, 0x51, 0x40, 0x27, 0xba, 0xf9, 0x33, 0x96, 0x25,
	0x38, 0xd2, 0xf0, 0xb7, 0xc4, 0xa7, 0x6f, 0x5c, 0x2a, 0xde, 0xa9, 0x5d, 0xdd, 0xc2, 0x33, 0x86,
	0x04, 0x44, 0x38, 0xe6, 0x8c, 0xd0, 0x13, 0x32, 0x10, 0x01, 0x57, 0x46, 0x6d, 0xe1, 0x14, 0x4f,
	0x76, 0x69, 0x6f, 0x5d, 0xc1, 0x89, 0x60, 0xa6, 0xf7, 0x88, 0x48, 0xe7, 0xbf, 0x16, 0x94, 0xb5,
	0x8b, 0x72, 0x90, 0xc9, 0x76, 0x66, 0xbf, 0x23, 0x52, 0xf7, 0x56, 0x94, 0x49, 0x63, 0x4d, 0xd6,
	0x8e, 0x69, 0x69, 0xdc, 0x90, 0x4b, 0x48, 0xf8, 0x83, 0x7b, 0xb5, 0x76, 0x11, 0xcf, 0x18, 0x52,
	0xa7, 0x17, 0x60, 0xd2, 0x3f, 0xc7, 0x26, 0x69, 0x47, 0xa4, 0xac, 0x02, 0x3c, 0x0c, 0x5d, 0x73,
	0xe2, 0xd4, 0xb7, 0xe4, 0xc9, 0x64, 0xa1, 0xb2, 0x74, 0x15, 0xab, 0xef, 0x74, 0x46, 0xd1, 0x3d,
	0x7f, 0x22, 0xa3, 0xb4, 0xa0, 0x42, 0xcd, 0x36, 0xaa, 0x6a, 0x68, 0x80, 0x10, 0x6d, 0x2d, 0x8e,
	0xa5, 0xd1, 0x31, 0xad, 0xce, 0xb2, 0xda, 0xdf, 0x2d, 0x28, 0xeb, 0xb0, 0xa5, 0x1c, 0xb4, 0x96,
	0x39, 0x58, 0x98, 0x77, 0xb0, 0x09, 0x9b, 0xee, 0x68, 0xc4, 0xa8, 0x4b, 0x04, 0xf3, 0xee, 0x4d,
	0xcf, 0x97, 0x64, 0x45, 0x0b, 0xaf, 0xcf, 0xf2, 0xc3, 0x0e, 0x94, 0xc6, 0xf2, 0x1e, 0x66, 0x7c,
	0xd7, 0x44, 0xda, 0xd1, 0xf2, 0x32, 0x47, 0x37, 0x96, 0x39, 0xea, 0xf4, 0xe1, 0x50, 0x37, 0x4d,
	0x9d, 0x8c, 0xd2, 0x15, 0x1d, 0xde, 0xa8, 0x06, 0x5b, 0x89, 0x1a, 0x2c, 0x37, 0x41, 0x4f, 0x09,
	0xd5, 0x01, 0x28, 0xe1, 0x98, 0x76, 0xbe, 0x06, 0x67, 0x99, 0x52, 0x73, 0x68, 0xb7, 0xa1, 0xe0,
	0x52, 0xa5, 0xb3, 0x88, 0x0b, 0x2e, 0x75, 0xbe, 0x84, 0x27, 0xa7, 0x4c, 0x2c, 0xb3, 0x63, 0x7e,
	0xc6, 0x5f, 0x2c, 0xf8, 0x69, 0xee, 0x94, 0xec, 0x55, 0x32, 0xfb, 0x89, 0xa4, 0x2f, 0xc5, 0xb4,
	0x2f, 0xe9, 0x3c, 0xb0, 0xbe, 0xb4, 0xc1, 0x2a, 0xcd, 0x35, 0x58, 0xce, 0x00, 0x0e, 0x75, 0xdd,
	0xff, 0x08, 0xa7, 0x3e, 0xd6, 0x40, 0xe7, 0x29, 0x38, 0xcb, 0x16, 0x31, 0xb5, 0xf7, 0x05, 0x1c,
	0xea, 0xa2, 0xfc, 0x31, 0xfb, 0xfb, 0x14, 0x9c, 0x65, 0x93, 0x8c, 0x6a, 0x07, 0x9a, 0xb2, 0x01,
	0xc9, 0x1a, 0x13, 0x95, 0x3d, 0xe7, 0x77, 0x70, 0xb8, 0x64, 0x8c, 0x09, 0xd5, 0x2f, 0xe7, 0xaa,
	0xcd, 0xe7, 0xa6, 0x25, 0x59, 0xb6, 0x7a, 0x94, 0xbc, 0x9f, 0x1f, 0x40, 0x25, 0xba, 0x9b, 0xa3,
	0x0d, 0x28, 0xe2, 0x6f, 0xbf, 0xaa, 0xaf, 0xe9, 0x8f, 0xe3, 0xba, 0xf5, 0xdc, 0x83, 0x87, 0x19,
	0x05, 0x15, 0x01, 0x94, 0xfb, 0xbd, 0xce, 0xc5, 0x79, 0xb7, 0xbe, 0x26, 0xbf, 0x5f, 0x9f, 0x9d,
	0x5f, 0x5f, 0xf5, 0xea, 0x16, 0xaa, 0xc0, 0xfa, 0x37, 0x17, 0xd7, 0xb8, 0x5e, 0x90, 0x1a, 0xba,
	0xed, 0xef, 0xea, 0x45, 0xc9, 0x7a, 0xd3, 0xeb, 0xbd, 0xac, 0xaf, 0xa3, 0x2a, 0x94, 0x5e, 0x5f,
	0x9c, 0x5f, 0x7d, 0x53, 0x2f, 0xa1, 0x4d, 0xd8, 0xf8, 0xcd, 0x75, 0x1b, 0x5f, 0xf5, 0x70, 0xbd,
	0x2c, 0x47, 0x7c, 0xd7, 0x6b, 0xe3, 0xfa, 0xc6, 0xf1, 0x7f, 0x6a, 0xb0, 0x75, 0xce, 0xc4, 0x5d,
	0xc0, 0xdf, 0xf7, 0x19, 0xbf, 0x65, 0x1c, 0x61, 0x78, 0xb0, 0xf0, 0xd2, 0x86, 0x0e, 0xa4, 0x7f,
	0x79, 0x0f, 0xa4, 0x8d, 0x9f, 0xe4, 0x48, 0xcd, 0xae, 0xaf, 0xa1, 0x33, 0xd8, 0x4e, 0x3f, 0xb7,
	0xa1, 0x7d, 0xb3, 0x61, 0x19, 0xda, 0x1a, 0x59, 0xa2, 0x58, 0x15, 0x86, 0x07, 0x0b, 0x8f, 0x07,
	0xda, 0xbc, 0xbc, 0x37, 0x1f, 0x6d, 0x5e, 0xfe, 0x8b, 0x83, 0xd2, 0xb9, 0xf0, 0x7e, 0xa0, 0x75,
	0xe6, 0x3d, 0x45, 0x68, 0x9d, 0xf9, 0x8f, 0x0e, 0x6b, 0xe8, 0x02, 0xea, 0xf3, 0x6f, 0x0b, 0xe8,
	0xb1, 0xf1, 0x2c, 0xeb, 0x31, 0xa2, 0x71, 0x90, 0x2d, 0x8c, 0x15, 0xfe, 0x1e, 0xf6, 0x73, 0xef,
	0xfa, 0xe8, 0xa9, 0x9c, 0xbc, 0xea, 0x51, 0xa2, 0xf1, 0x6c, 0xc5, 0xa8, 0x78, 0xad, 0x0e, 0xd4,
	0x92, 0xd7, 0x74, 0xa4, 0xda, 0xbc, 0x8c, 0x37, 0x84, 0x86, 0xbd, 0x28, 0x88, 0x95, 0x9c, 0xc0,
	0x56, 0xea, 0x92, 0x8b, 0xec, 0x19, 0x4c, 0xd2, 0x9d, 0x79, 0x63, 0x3f, 0x43, 0x12, 0xeb, 0xf9,
	0x15, 0xc0, 0xac, 0xe9, 0x43, 0x8f, 0xe6, 0x9b, 0x7f, 0xad, 0x21, 0xe7, 0x4e, 0xa0, 0xcd, 0x48,
	0xdd, 0x68, 0xb4, 0x19, 0x59, 0x57, 0x3a, 0x6d, 0x46, 0xf6, 0xf5, 0x67, 0x0d, 0xb5, 0xa1, 0x96,
	0xb8, 0xbc, 0x84, 0x48, 0xad, 0xb8, 0x78, 0x25, 0x6a, 0xec, 0x2d, 0xf0, 0x93, 0xa6, 0xa4, 0xae,
	0x1b, 0xda, 0x94, 0xac, 0xbb, 0x8a, 0x36, 0x25, 0xfb, 0x6e, 0xb2, 0x86, 0x5e, 0xc1, 0x67, 0x73,
	0x6d, 0x30, 0x6a, 0xa4, 0xfd, 0x4f, 0x36, 0xf2, 0x8d, 0xc7, 0x99, 0xb2, 0x58, 0xdb, 0xb5, 0x7a,
	0x3d, 0x5f, 0xec, 0x87, 0x51, 0xd3, 0xcc, 0xcb, 0x6d, 0x95, 0x75, 0xf8, 0xb3, 0xda, 0x5c, 0x67,
	0x0d, 0x8d, 0xa0, 0x91, 0x5f, 0x59, 0xd1, 0xb3, 0x59, 0xc4, 0x97, 0xa4, 0xf9, 0xc6, 0x17, 0xab,
	0x86, 0xc5, 0xcb, 0x51, 0x75, 0x35, 0xc8, 0x5c, 0xcb, 0x59, 0x9a, 0x9c, 0xf5, 0x42, 0x1f, 0x92,
	0xc0, 0xb5, 0x53, 0xf9, 0x15, 0x4c, 0x3b, 0xb5, 0xb2, 0x8c, 0x6a, 0xa7, 0x3e, 0xa0, 0x10, 0xaa,
	0xe5, 0xf2, 0xab, 0x9a, 0x5e, 0x6e, 0x65, 0xa9, 0xd4, 0xcb, 0x7d, 0x40, 0x71, 0x54, 0x29, 0x26,
	0xb7, 0xf4, 0xe9, 0x14, 0xb3, 0xaa, 0x7a, 0xea, 0x14, 0xb3, 0xb2, 0x7e, 0x3a, 0x6b, 0x6f, 0xcb,
	0xea, 0xe7, 0xdb, 0x8b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xea, 0x69, 0x3a, 0x0a, 0x88, 0x1b,
	0x00, 0x00,
}
